{
  "name": "node-redis-cluster",
  "version": "0.1.6",
  "description": "a redis cluster abstraction over node-redis",
  "main": "lib/index.js",
  "keywords": [
    "redis",
    "cluster"
  ],
  "author": {
    "name": "Yaniv Kessler"
  },
  "repository": {
    "type": "git",
    "url": "http://github.com/kessler/redis-cluster.git"
  },
  "bugs": {
    "url": "http://github.com/kessler/redis-cluster/issues"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "https://raw.github.com/kessler/redis-cluster/master/LICENSE"
    }
  ],
  "dependencies": {
    "async": "~0.2.10",
    "redis": "~0.10.0",
    "hashring": "latest"
  },
  "devDependencies": {
    "vows": "~0.7.0"
  },
  "engine": {
    "node": ">=0.8"
  },
  "gitHead": "938bce5e4dcec84bb0d484535f4fbfc884d9e0b2",
  "readme": "RedisCluster\n============\n\nNOTICE: This project is still super alpha!\n\nA redis cluster with pluggable redis client factory and key mapper / load balancer.\n\nThe execMany function requires that the key mapper will be consistent (i.e it should know\nin which server a key resides)\n\n### install\n```\n\tnpm install node-redis-cluster\n```\n\n### default: hash ring based redis cluster\nThe default cluster uses a [hash ring](http://github.com/3rd-Eden/node-hashring.git) to disribute keys\namong its nodes\n```\nvar RedisCluster = require('node-redis-cluster').RedisCluster;\n\nvar rcluster = RedisCluster.create([\n\t{ port: 6379, host: '10.0.0.1' },\n\t{ port: 6379, host: '10.0.0.2' },\n\t{ port: 6379, host: '10.0.0.3' },\n]);\n\nvar redis1 = rcluster.getRedis('someKey');\nvar redis2 = rcluster.getRedis('someKey');\n\n// redis1 === redis2\n\nrcluster.exec('get', ['somekey'], function(err, reply) {\n\t//reply is the value of somekey\n});\n\nrcluster.execMany('get', ['somekey1', 'somekey2', 'somekey3', 'somekey4'], function(err, results) {\n\t/* results will be\n\t\t{\n\t\t\tsomekey1: 'somevalue',\n\t\t\tsomekey2: 'somevalue',\n\t\t\tsomekey3: 'somevalue',\n\t\t\tsomekey4: 'somevalue'\n\t\t}\n\t*/\n});\n\nrcluster.execAll('keys', ['*'], function(err, results) {\n\t/* results will be\n\t\t{\n\t\t\t'10.0.0.1:6379': [ // keys],\n\t\t\t'10.0.0.2:6379': [ // keys],\n\t\t\t'10.0.0.3:6379': [ // keys]\n\t\t}\n\t*/\n});\n\n```\n\n### customizing cluster behavior\n```\n\nvar redis = require('redis');\nvar RedisCluster = require('node-redis-cluster').RedisCluster;\n\nvar servers = [\n\t{ port: 6379, host: '10.0.0.1' },\n\t{ port: 6379, host: '10.0.0.2' },\n\t{ port: 6379, host: '10.0.0.3' },\n];\n\nfunction RedisFactory() {\n\n}\n\nRedisFactory.prototype.createClient(port, host) {\n\tsendEmailToAdmin(host + ':' + port + ' was added to redis cluster');\n\treturn redis.createClient(port, host /* possibly apply any node-redis options */);\n};\n\nfunction CustomKeyMapper() {\n\tthis.servers = [];\n}\n\nCustomKeyMapper.prototype.add = function(serverKey) {\n\tthis.server.push(serverKey);\n};\n\nCustomKeyMapper.prototype.get = function(key) {\n\tif (this.servers.length < 2)\n\t\tthrow new Error('not enough servers added');\n\n\tif (key === 'a') return this.servers[0];\n\telse return this.servers[1];\n};\n\nvar customCluster = new RedisCluster(servers, new RedisFactory(), new CustomKeyMapper());\n\n```\n\n### command line interface\nA very simple cli is provided as well, to start it:\n```\nvar Cli = require('node-redis-cluster').Cli;\n\nCli.start(function(context) {\n\tcontext.rcluster.add('your.host');\n\tcontext.rcluster.add('your.host2', 6379);\n});\n```\nor simply:\n```\nnode lib/cluster-cli.js\n```\n\n",
  "readmeFilename": "README.md",
  "homepage": "https://github.com/kessler/redis-cluster",
  "_id": "node-redis-cluster@0.1.6",
  "_shasum": "e32650221523b678026f784c0d93d4e190053e39",
  "_from": "git://github.com/nyxtom/redis-cluster.git",
  "_resolved": "git://github.com/nyxtom/redis-cluster.git#938bce5e4dcec84bb0d484535f4fbfc884d9e0b2",
  "_fromGithub": true
}
